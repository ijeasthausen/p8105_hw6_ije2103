node_names = xml_file %>%
names() %>%
unique() #is this step removing data??
l =  sapply(node_names, get_node_value, xml_file)
df = lapply(l, paste, collapse=", ") %>%
as.tibble()
list_of_dfs[[i]] = df
}
library(forcats)
get_node = function(node_name, xml_file) {
xmlTreeParse(xml_file, useInternal = TRUE) %>%
xmlRoot() %>%
xpathSApply(node_name, xmlValue)
}
get_node_value = function(node_name, xml_file) {
xpathSApply(xml_file, node_name, xmlValue)
}
files = list.files("data/xml_files")
list_of_dfs = list()
for(i in files) {
file_path = paste("data/xml_files/", i, sep = '')
xml_file = read_xml(file_path) %>%
xmlTreeParse(useInternal = TRUE) %>%
xmlRoot()
node_names = xml_file %>%
names() %>%
unique() #is this step removing data??
l =  sapply(node_names, get_node_value, xml_file)
df = lapply(l, paste, collapse=", ") %>%
as.tibble()
list_of_dfs[[i]] = df
}
library(XML)
library(methods)
library(haven)
library(janitor)
library(readxl)
library(tidyverse)
library(knitr)
library(ggridges)
library(hexbin)
library(forcats)
library(httr)
library(rvest)
library(stringr)
library(forcats)
library(viridis)
library(tidytext)
library(broom)
get_node = function(node_name, xml_file) {
xmlTreeParse(xml_file, useInternal = TRUE) %>%
xmlRoot() %>%
xpathSApply(node_name, xmlValue)
}
get_node_value = function(node_name, xml_file) {
xpathSApply(xml_file, node_name, xmlValue)
}
files = list.files("data/xml_files")
list_of_dfs = list()
for(i in files) {
file_path = paste("data/xml_files/", i, sep = '')
xml_file = read_xml(file_path) %>%
xmlTreeParse(useInternal = TRUE) %>%
xmlRoot()
node_names = xml_file %>%
names() %>%
unique() #is this step removing data??
l =  sapply(node_names, get_node_value, xml_file)
df = lapply(l, paste, collapse=", ") %>%
as.tibble()
list_of_dfs[[i]] = df
}
.rs.restartR()
knitr::opts_chunk$set(echo = TRUE)
library(XML)
library(plyr)
library(tidyverse)
get_node = function(node_name, xml_file) {
xmlTreeParse(xml_file, useInternal = TRUE) %>%
xmlRoot() %>%
xpathSApply(node_name, xmlValue)
}
get_node_value = function(node_name, xml_file) {
xpathSApply(xml_file, node_name, xmlValue)
}
files = list.files("data/xml_files")
list_of_dfs = list()
for(i in files) {
file_path = paste("data/xml_files/", i, sep = '')
xml_file = read_xml(file_path) %>%
xmlTreeParse(useInternal = TRUE) %>%
xmlRoot()
node_names = xml_file %>%
names() %>%
unique() #is this step removing data??
l =  sapply(node_names, get_node_value, xml_file)
df = lapply(l, paste, collapse=", ") %>%
as.tibble()
list_of_dfs[[i]] = df
}
.rs.restartR()
knitr::opts_chunk$set(echo = TRUE)
library(XML)
library(plyr)
library(tidyverse)
get_node = function(node_name, xml_file) {
xmlTreeParse(xml_file, useInternal = TRUE) %>%
xmlRoot() %>%
xpathSApply(node_name, xmlValue)
}
get_node_value = function(node_name, xml_file) {
xpathSApply(xml_file, node_name, xmlValue)
}
files = list.files("data/xml_files")
list_of_dfs = list()
for(i in files) {
file_path = paste("data/xml_files/", i, sep = '')
xml_file = read_xml(file_path) %>%
xmlTreeParse(useInternal = TRUE) %>%
xmlRoot()
node_names = xml_file %>%
names() %>%
unique() #is this step removing data??
l =  sapply(node_names, get_node_value, xml_file)
df = lapply(l, paste, collapse=", ") %>%
as.tibble()
list_of_dfs[[i]] = df
}
.rs.restartR()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(forcats)
library(stringr)
set.seed(1)
df = data_frame(
a = rnorm(20),
b = rnorm(20),
c = rnorm(20),
d = rnorm(20)
)
df
z_score = function(x) {
z = mean(x) / sd(x)
z
}
output = vector("list", length = 4)
for (i in 1:4) {
output[[i]] = z_score(df[[i]])
}
output
output = vector("list", length = 4)
output
output = map(df, z_score)
output
output = map_dbl(df, z_score)
output
output = map_lgl(df, z_score)
z_score = function(x) {
if (!is.numeric(x)) {
stop("argument x should be numeric")
} else if (length(x) == 1) {
stop("z-scores cannot be computed for length 1 vectors")
}
mean_x = mean(x)
sd_x = sd(x)
z = mean_x / sd_x
data_frame(
mean = mean_x,
sd = sd_x,
z = z
)
}
map(df, z_score)
df = data_frame(
a = rnorm(20),
b = rnorm(20),
c = rnorm(20),
d = rnorm(20)
)
map(df, z_score)
map_df(df, z_score)
output = map(df, z_score)
output
output = map_df(df, z_score)
output
library(rvest)
library(stringr)
read_page_reviews <- function(url) {
h = read_html(url)
title = h %>%
html_nodes("#cm_cr-review_list .review-title") %>%
html_text()
stars = h %>%
html_nodes("#cm_cr-review_list .review-rating") %>%
html_text() %>%
str_extract("\\d") %>%
as.numeric()
text = h %>%
html_nodes(".review-data:nth-child(4)") %>%
html_text()
data_frame(title, stars, text)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(ggridges)
library(stringr)
library(forcats)
library(ggplot2)
restaurant_inspections = read_csv("DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
filter(grade %in% c("A", "B", "C"), boro != "Missing") %>%
mutate(boro = str_to_title(boro))
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
count(score)
remove_non_longitudinal_data
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
count(score) %>%
factor(score)
remove_non_longitudinal_data$score
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
count(score) %>%
factor(score)
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
mutate(inspection_date = factor(inspection_date))
remove_non_longitudinal_data = restaurant_inspections %>%
mutate(inspection_date_fct = factor(inspection_date))
remove_non_longitudinal_data
remove_non_longitudinal_data = restaurant_inspections %>%
mutate(inspection_date_fct = factor(inspection_date)) %>%
group_by(camis)
remove_non_longitudinal_data = restaurant_inspections %>%
mutate(inspection_date_fct = factor(inspection_date)) %>%
group_by(camis) %>%
count(levels(inspection_date_fct))
remove_non_longitudinal_data = restaurant_inspections %>%
mutate(inspection_date_fct = factor(inspection_date)) %>%
group_by(camis) %>%
count(unique(inspection_date_fct))
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
count(inspection_date)
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(unique(inspection_date))
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(inspection_date == unique(inspection_date))
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis)
View(remove_non_longitudinal_data)
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date))
remove_non_longitudinal_data
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date)) %>%
count(inspection_date)
remove_non_longitudinal_data
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date))
remove_non_longitudinal_data
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date)) %>%
select(camis, inspection_date, score) %>%
plot_ly(x = ~inspection_date, y = ~score, group_by = ~camis,
type = 'scatter',
alpha = 0.25,
mode = 'lines+markers') %>%
layout(xaxis = list(range = c(as.Date('2012-01-01'), as.Date('2019-01-01'))))
remove_non_longitudinal_data
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date)) %>%
mutate(inspection_date_fct = factor(inspection_date)) %>%
filter(nlevels(inspection_date_fct) > 3)
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date)) %>%
select(camis, inspection_date, score)
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date)) %>%
mutate(inspection_date_fct = factor(inspection_date)) %>%
select(camis, inspection_date, inspection_date_fct, score)
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date)) %>%
mutate(inspection_date_fct = factor(inspection_date))
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date)) %>%
mutate(inspection_date_fct = as.factor(inspection_date))
remove_non_longitudinal_data = restaurant_inspections %>%
group_by(camis) %>%
filter(!duplicated(inspection_date)) %>%
select(camis, inspection_date, score) %>%
plot_ly(x = ~inspection_date, y = ~score, group_by = ~camis,
type = 'scatter',
alpha = 0.25,
mode = 'lines+markers') %>%
layout(xaxis = list(range = c(as.Date('2012-01-01'), as.Date('2019-01-01'))))
remove_non_longitudinal_data
boros = restaurant_inspections %>% distinct(boro) %>% pull()
# selectInput widget
selectInput("boro_choice", label = h3("Select boro"),
choices = boros, selected = "Manhattan")
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(shiny)
boros = restaurant_inspections %>% distinct(boro) %>% pull()
# selectInput widget
selectInput("boro_choice", label = h3("Select boro"),
choices = boros, selected = "Manhattan")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
theme_set(theme_bw())
theme_update(legend.position = "bottom")
set.seed(1)
library(rnoaa)
weather =
meteo_pull_monitors(c("USW00094728", "USC00519397", "USS0023B17S"),
var = c("PRCP", "TMIN", "TMAX"),
date_min = "2016-01-01",
date_max = "2016-12-31") %>%
mutate(
name = recode(id, USW00094728 = "CentralPark_NY",
USC00519397 = "Waikiki_HA",
USS0023B17S = "Waterhole_WA"),
tmin = tmin / 10,
tmax = tmax / 10) %>%
select(name, id, everything())
weather_nest =
nest(weather, date:tmin)
weather_nest
weather_nest
weather_nest$data
weather_lm = function(df) {
lm(tmax ~ tmin, data = df)
}
weather_lm(weather_nest$data[[1]])
map(weather_nest$data, weather)
map(weather_nest$data, weather_lm)
weather_nest %>%
mutate(models = map(data, weather_lm))
weather_nest
weather_nest = weather_nest %>%
mutate(models = map(data, weather_lm))
weather_nest
weather_nest = weather_nest %>%
mutate(models = map(data, tidy(weather_lm)))
weather_nest = weather_nest %>%
mutate(models = map(data, broom::tidy(weather_lm)))
weather_nest = weather_nest %>%
mutate(models = map(data, tidy(weather_lm),
results = map(models, broom::tidy)))
knitr::opts_chunk$set(echo = TRUE)
library(broom)
library(tidyverse)
theme_set(theme_bw())
theme_update(legend.position = "bottom")
set.seed(1)
weather_nest = weather_nest %>%
mutate(models = map(data, tidy(weather_lm),
results = map(models, broom::tidy)))
weather_nest
weather_analysis =
weather %>%
nest(date:tmin) %>%
mutate(models = map(data, weather_lm),
results = map(models, broom::tidy)) %>%
select(-data, -models) %>%
unnest()
weather_analysis
weather_nest =
nest(weather, date:tmin)
weather_nest
#function to fit tmax vs tmin for given dataframe
weather_lm = function(df) {
lm(tmax ~ tmin, data = df)
}
weather_lm(weather_nest$data[[1]]) #function works!
lms = map(weather_nest$data, weather_lm)
lms #looks good!
weather_nest1 = weather_nest %>%
mutate(models = map(data, tidy(weather_lm),
results = map(models, broom::tidy)))
weather_nest1 = weather_nest %>%
mutate(models = map(data, tidy(weather_lm)) %>%
mutate(results = map(models, broom::tidy)))
weather_nest1 = weather_nest %>%
mutate(models = map(data, tidy(weather_lm), mutate(results = map(models, broom::tidy)))
weather_nest1
weather_nest1 = weather_nest %>%
mutate(models = map(data, tidy(weather_lm), mutate(results = map(models, broom::tidy)))
weather_nest1 = weather_nest %>%
weather_nest1 = weather_nest %>%
mutate(models = map(data, tidy(weather_lm), mutate(results = map(models, broom::tidy))))
instacart = read_csv("./data/instacart_train_data.csv.zip")
instacart = read_csv("./data/instacart_train_data.csv.zip")
instacart_nest =
instacart %>%
group_by(department) %>%
nest()
instacart_nest
set.seed(10)
n_samp = 250
sim_df_const = tibble(
x = rnorm(n_samp, 1, 1),
error = rnorm(n_samp, 0, 1),
y = 2 + 3 * x + error
)
sim_df_nonconst = sim_df_const %>%
mutate(
error = error * .75 * x,
y = 2 + 3 * x + error
)
bind_rows(
mutate(sim_df_const, data = "sim_df_const"),
mutate(sim_df_nonconst, data = "sim_df_nonconst")
) %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .5) +
stat_smooth(method = "lm") +
facet_grid(~data)
125/250
2250/750
250/750
0.5/0.3333333
0.5-0.3333333
85/110
150/400
0.7727273/0.375
0.7727273-0.375
40/140
100/350
40/105
150/375
0.38/0.4
0.38-.4
60/105
125/225
0.5714286-v
0.5714286/0.5555556
0.5714286-0.5555556
50/155
72/362
0.3225806/0.198895
0.3225806-0.198895
75/95
178/388
0.7894737-0.4587629
0.7894737/0.4587629
rmarkdown::render_site
getwd()
setwd('/Users/ImaaniEasthausen/Documents/Biostats MS/Data_Science/p8105_hw6_ije2103')
getwd()
rmarkdown::render_site
rmarkdown::render_site()
installed.packages('DT')
install.packages('DT')
rmarkdown::render_site()
install.packages('knitLatex')
rmarkdown::render_site()
shiny::runApp('~/Documents/Biostats MS/Data_Science/20171106/20171106')
restaurant_inspections
View(restaurant_inspections)
cuisine = restaurant_inspections %>% distinct(cuisine_description) %>% pull()
# radioButtons widget
radioButtons("cuisine", label = h3("Choose a cuisine"),
choices = cuisine)
selected = NULL)
rmarkdown::render_site()
getwd()
setwd('/Users/ImaaniEasthausen/Documents/Biostats MS/Data_Science/p8105_hw6_shiny_nyc_rest_insp')
rmarkdown::render_site()
getwd()
setwd('/Users/ImaaniEasthausen/Documents/Biostats MS/Data_Science/p8105_hw6_ije2103')
rmarkdown::render_site()
rmarkdown::render_site()
render("hw6_flexdashboard.Rmd", "flex_dashboard")
flex_dashboard('hw6_flexdashboard.Rmd')
rmarkdown::render_site()
rmarkdown::render_site()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ijeasthausen',
token='49362B2573A525CDEB2EB6C4D267B993',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ijeasthausen',
token='49362B2573A525CDEB2EB6C4D267B993',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ijeasthausen',
token='49362B2573A525CDEB2EB6C4D267B993',
secret='I3cNbAMsfPU9B5yjdD6pBTzrqcOcUXY/HY5AWv5+')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('/Users/ImaaniEasthausen/Documents/Biostats MS/Data_Science/p8105_hw6_shiny_nyc_rest_insp/index.Rmd')
rmarkdown::render_site()
rmarkdown::render_site()
